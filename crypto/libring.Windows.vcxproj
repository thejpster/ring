<?xml version="1.0" encoding="utf-8"?>
<Project DefaultTargets="Build" ToolsVersion="14.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <PropertyGroup Label="Globals">
    <ProjectGuid>{F4C0A1B6-5E09-41C8-8242-3E1F6762FB18}</ProjectGuid>
    <ProjectName>libring.Windows</ProjectName>
    <TargetName>ring-core</TargetName>
  </PropertyGroup>
  <PropertyGroup Label="Configuration">
    <ConfigurationType>StaticLibrary</ConfigurationType>
  </PropertyGroup>
  <ImportGroup Label="PropertySheets">
    <Import Project="..\mk\Windows.props" />
  </ImportGroup>
  <PropertyGroup Label="Configuration">
    <OutDir>$(OutRootDir)lib\</OutDir>
  </PropertyGroup>
  <ItemGroup>
    <ClCompile Include="cpu-intel.c" />
    <ClCompile Include="crypto.c" />
    <ClCompile Include="aes\aes.c" />
    <ClCompile Include="bn\add.c" />
    <ClCompile Include="bn\bn.c" />
    <ClCompile Include="bn\cmp.c" />
    <ClCompile Include="bn\convert.c" />
    <ClCompile Include="bn\ctx.c" />
    <ClCompile Include="bn\div.c" />
    <ClCompile Include="bn\exponentiation.c" />
    <ClCompile Include="bn\gcd.c" />
    <ClCompile Include="bn\generic.c" />
    <ClCompile Include="bn\montgomery.c" />
    <ClCompile Include="bn\mul.c" />
    <ClCompile Include="bn\random.c" />
    <ClCompile Include="bn\rsaz_exp.c" />
    <ClCompile Include="bn\shift.c" />
    <ClCompile Include="cipher\e_aes.c" />
    <ClCompile Include="curve25519\curve25519.c" />
    <ClCompile Include="ec\ecp_nistz.c" />
    <ClCompile Include="ec\ecp_nistz256.c" />
    <ClCompile Include="ec\gfp_constant_time.c" />
    <ClCompile Include="ec\gfp_p256.c" />
    <ClCompile Include="ec\gfp_p384.c" />
    <ClCompile Include="ec\wnaf.c" />
    <ClCompile Include="mem.c" />
    <ClCompile Include="modes\gcm.c" />
    <ClCompile Include="poly1305\poly1305.c" />
    <ClCompile Include="rand\sysrand.c" />
    <ClCompile Include="rsa\blinding.c" />
    <ClCompile Include="rsa\rsa.c" />
    <ClCompile Include="rsa\rsa_impl.c" />
  </ItemGroup>
  <ItemGroup>
    <ClInclude Include="aes\internal.h" />
    <ClInclude Include="bn\internal.h" />
    <ClInclude Include="bn\rsaz_exp.h" />
    <ClInclude Include="cipher\internal.h" />
    <ClInclude Include="des\internal.h" />
    <ClInclude Include="digest\internal.h" />
    <ClInclude Include="ec\internal.h" />
    <ClInclude Include="ec\ecp_nistz256_table.inl" />
    <ClInclude Include="evp\internal.h" />
    <ClInclude Include="modes\internal.h" />
    <ClInclude Include="rand\internal.h" />
    <ClInclude Include="rsa\internal.h" />
  </ItemGroup>
  <ItemGroup Condition="'$(ProcessorArchitecture)' == 'x86'">
    <PerlAsm Include="aes/asm/aes-586.pl" />
    <PerlAsm Include="aes/asm/aesni-x86.pl" />
    <PerlAsm Include="aes/asm/vpaes-x86.pl" />
    <PerlAsm Include="bn/asm/x86-mont.pl" />
    <PerlAsm Include="chacha/asm/chacha-x86.pl" />
    <PerlAsm Include="ec/asm/ecp_nistz256-x86.pl" />
    <PerlAsm Include="modes/asm/ghash-x86.pl" />
    <PerlAsm Include="poly1305/asm/poly1305-x86.pl" />
    <PerlAsm Include="sha/asm/sha256-586.pl" />
    <PerlAsm Include="sha/asm/sha512-586.pl" />
  </ItemGroup>
  <ItemDefinitionGroup Condition="'$(ProcessorArchitecture)' == 'x86'">
    <!-- XXX: There's almost definitely a way to defiune the PerlAsm task to
         compute this automatically, but for now we do it manually. -->
    <Lib>
      <AdditionalDependencies>
        $(IntDir)aes-586.obj;
        $(IntDir)aesni-x86.obj;
        $(IntDir)vpaes-x86.obj;
        $(IntDir)x86-mont.obj;
        $(IntDir)chacha-x86.obj;
        $(IntDir)ecp_nistz256-x86.obj;
        $(IntDir)ghash-x86.obj;
        $(IntDir)poly1305-x86.obj;
        $(IntDir)sha256-586.obj;
        $(IntDir)sha512-586.obj;
      </AdditionalDependencies>
    </Lib>
  </ItemDefinitionGroup>
  <ItemGroup Condition="'$(ProcessorArchitecture)' == 'amd64'">
    <PerlAsm Include="aes/asm/aes-x86_64.pl" />
    <PerlAsm Include="aes/asm/aesni-x86_64.pl" />
    <PerlAsm Include="aes/asm/bsaes-x86_64.pl" />
    <PerlAsm Include="aes/asm/vpaes-x86_64.pl" />
    <PerlAsm Include="bn/asm/rsaz-avx2.pl" />
    <PerlAsm Include="bn/asm/x86_64-mont.pl" />
    <PerlAsm Include="bn/asm/x86_64-mont5.pl" />
    <PerlAsm Include="chacha/asm/chacha-x86_64.pl" />
    <!-- XXX: curve25519/asm/x25519-asm-x86_64.S doesn't support Windows. -->
    <ClCompile Include="curve25519\x25519-x86_64.c" />
    <PerlAsm Include="ec/asm/ecp_nistz256-x86_64.pl" />
    <PerlAsm Include="ec/asm/p256-x86_64-asm.pl" />
    <PerlAsm Include="modes/asm/aesni-gcm-x86_64.pl" />
    <PerlAsm Include="modes/asm/ghash-x86_64.pl" />
    <PerlAsm Include="poly1305/asm/poly1305-x86_64.pl" />
    <PerlAsm Include="sha/asm/sha256-x86_64.pl">
      <AdditionalDependencies>sha/asm/sha-x86_64.pl</AdditionalDependencies>
    </PerlAsm>
    <PerlAsm Include="sha/asm/sha512-x86_64.pl">
      <AdditionalDependencies>sha/asm/sha-x86_64.pl</AdditionalDependencies>
    </PerlAsm>
  </ItemGroup>
  <ItemDefinitionGroup Condition="'$(ProcessorArchitecture)' == 'amd64'">
    <!-- XXX: There's almost definitely a way to defiune the PerlAsm task to
         compute this automatically, but for now we do it manually. -->
    <Lib>
      <AdditionalDependencies>
        $(IntDir)aes-x86_64.obj;
        $(IntDir)aesni-x86_64.obj;
        $(IntDir)bsaes-x86_64.obj;
        $(IntDir)chacha-x86_64.obj;
        $(IntDir)vpaes-x86_64.obj;
        $(IntDir)rsaz-avx2.obj;
        $(IntDir)x86_64-mont.obj;
        $(IntDir)x86_64-mont5.obj;
        $(IntDir)ecp_nistz256-x86_64.obj;
        $(IntDir)p256-x86_64-asm.obj;
        $(IntDir)aesni-gcm-x86_64.obj;
        $(IntDir)ghash-x86_64.obj;
        $(IntDir)poly1305-x86_64.obj;
        $(IntDir)sha256-x86_64.obj;
        $(IntDir)sha512-x86_64.obj;
      </AdditionalDependencies>
    </Lib>
  </ItemDefinitionGroup>
  <ItemDefinitionGroup>
    <ClCompile>
      <AdditionalIncludeDirectories>%(AdditionalIncludeDirectories);..\include</AdditionalIncludeDirectories>
      <PreprocessorDefinitions>_LIB;%(PreprocessorDefinitions)</PreprocessorDefinitions>
    </ClCompile>
  </ItemDefinitionGroup>
  <Import Project="$(VCTargetsPath)\Microsoft.Cpp.targets" />
  <ImportGroup Label="ExtensionTargets">
    <Import Project="..\mk\perlasm-msbuild.targets" />
  </ImportGroup>
</Project>