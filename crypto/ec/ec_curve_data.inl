/* Copyright 2015 Brian Smith.
 *
 * Permission to use, copy, modify, and/or distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHORS DISCLAIM ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY
 * SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION
 * OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN
 * CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE. */

/* This entire file was generated by ecc_build.rs from an older version of
 * *ring*. */


static const BN_ULONG p256_field_limbs[] = {
    TOBN(0xffffffff, 0xffffffff),
    TOBN(0x00000000, 0xffffffff),
    TOBN(0x00000000, 0x00000000),
    TOBN(0xffffffff, 0x00000001),
  };
static const BN_ULONG p256_field_rr_limbs[] = {
    TOBN(0x00000000, 0x00000003),
    TOBN(0xfffffffb, 0xffffffff),
    TOBN(0xffffffff, 0xfffffffe),
    TOBN(0x00000004, 0xfffffffd),
  };
static const BN_ULONG p256_order_limbs[] = {
    TOBN(0xf3b9cac2, 0xfc632551),
    TOBN(0xbce6faad, 0xa7179e84),
    TOBN(0xffffffff, 0xffffffff),
    TOBN(0xffffffff, 0x00000000),
  };
static const BN_ULONG p256_order_rr_limbs[] = {
    TOBN(0x83244c95, 0xbe79eea2),
    TOBN(0x4699799c, 0x49bd6fa6),
    TOBN(0x2845b239, 0x2b6bec59),
    TOBN(0x66e12d94, 0xf3d95620),
  };
static const BN_ULONG p256_generator_x_limbs[] = {
    TOBN(0x79e730d4, 0x18a9143c),
    TOBN(0x75ba95fc, 0x5fedb601),
    TOBN(0x79fb732b, 0x77622510),
    TOBN(0x18905f76, 0xa53755c6),
  };
static const BN_ULONG p256_generator_y_limbs[] = {
    TOBN(0xddf25357, 0xce95560a),
    TOBN(0x8b4ab8e4, 0xba19e45c),
    TOBN(0xd2e88688, 0xdd21f325),
    TOBN(0x8571ff18, 0x25885d85),
  };
static const BN_ULONG p256_a_limbs[] = {
    TOBN(0xffffffff, 0xfffffffc),
    TOBN(0x00000003, 0xffffffff),
    TOBN(0x00000000, 0x00000000),
    TOBN(0xfffffffc, 0x00000004),
  };
static const BN_ULONG p256_b_limbs[] = {
    TOBN(0xd89cdf62, 0x29c4bddf),
    TOBN(0xacf005cd, 0x78843090),
    TOBN(0xe5a220ab, 0xf7212ed6),
    TOBN(0xdc30061d, 0x04874834),
  };
static const BN_ULONG p256_one_limbs[] = {
    TOBN(0x00000000, 0x00000001),
    TOBN(0xffffffff, 0x00000000),
    TOBN(0xffffffff, 0xffffffff),
    0xfffffffe,
  };

STATIC_BIGNUM_DIAGNOSTIC_PUSH

const EC_GROUP EC_GROUP_P256 = {
  FIELD(.meth =) NULL,
  FIELD(.generator =) {
    FIELD(.meth =) NULL,
    FIELD(.X =) STATIC_BIGNUM(p256_generator_x_limbs),
    FIELD(.Y =) STATIC_BIGNUM(p256_generator_y_limbs),
    FIELD(.Z =) STATIC_BIGNUM(p256_one_limbs),
  },
  FIELD(.order =) STATIC_BIGNUM(p256_order_limbs),
  FIELD(.order_mont =) {
    FIELD(.RR =) STATIC_BIGNUM(p256_order_rr_limbs),
    FIELD(.N =) STATIC_BIGNUM(p256_order_limbs),
    FIELD(.n0 =) { BN_MONT_CTX_N0(0xccd1c8aa, 0xee00bc4f) },
  },
  FIELD(.field =) STATIC_BIGNUM(p256_field_limbs),
  FIELD(.a =) STATIC_BIGNUM(p256_a_limbs),
  FIELD(.b =) STATIC_BIGNUM(p256_b_limbs),
  FIELD(.mont =) {
    FIELD(.RR =) STATIC_BIGNUM(p256_field_rr_limbs),
    FIELD(.N =) STATIC_BIGNUM(p256_field_limbs),
    FIELD(.n0 =) { BN_MONT_CTX_N0(0x0, 0x1) },
  },
  FIELD(.one =) STATIC_BIGNUM(p256_one_limbs),
};

STATIC_BIGNUM_DIAGNOSTIC_POP


static const BN_ULONG p384_field_limbs[] = {
    TOBN(0x00000000, 0xffffffff),
    TOBN(0xffffffff, 0x00000000),
    TOBN(0xffffffff, 0xfffffffe),
    TOBN(0xffffffff, 0xffffffff),
    TOBN(0xffffffff, 0xffffffff),
    TOBN(0xffffffff, 0xffffffff),
  };
static const BN_ULONG p384_field_rr_limbs[] = {
    TOBN(0xfffffffe, 0x00000001),
    TOBN(0x00000002, 0x00000000),
    TOBN(0xfffffffe, 0x00000000),
    TOBN(0x00000002, 0x00000000),
    0x00000001,
  };
static const BN_ULONG p384_order_limbs[] = {
    TOBN(0xecec196a, 0xccc52973),
    TOBN(0x581a0db2, 0x48b0a77a),
    TOBN(0xc7634d81, 0xf4372ddf),
    TOBN(0xffffffff, 0xffffffff),
    TOBN(0xffffffff, 0xffffffff),
    TOBN(0xffffffff, 0xffffffff),
  };
static const BN_ULONG p384_order_rr_limbs[] = {
    TOBN(0x2d319b24, 0x19b409a9),
    TOBN(0xff3d81e5, 0xdf1aa419),
    TOBN(0xbc3e483a, 0xfcb82947),
    TOBN(0xd40d4917, 0x4aab1cc5),
    TOBN(0x3fb05b7a, 0x28266895),
    TOBN(0x0c84ee01, 0x2b39bf21),
  };
static const BN_ULONG p384_generator_x_limbs[] = {
    TOBN(0x3dd07566, 0x49c0b528),
    TOBN(0x20e378e2, 0xa0d6ce38),
    TOBN(0x879c3afc, 0x541b4d6e),
    TOBN(0x64548684, 0x59a30eff),
    TOBN(0x812ff723, 0x614ede2b),
    TOBN(0x4d3aadc2, 0x299e1513),
  };
static const BN_ULONG p384_generator_y_limbs[] = {
    TOBN(0x23043dad, 0x4b03a4fe),
    TOBN(0xa1bfa8bf, 0x7bb4a9ac),
    TOBN(0x8bade756, 0x2e83b050),
    TOBN(0xc6c35219, 0x68f4ffd9),
    TOBN(0xdd800226, 0x3969a840),
    TOBN(0x2b78abc2, 0x5a15c5e9),
  };
static const BN_ULONG p384_a_limbs[] = {
    TOBN(0x00000003, 0xfffffffc),
    TOBN(0xfffffffc, 0x00000000),
    TOBN(0xffffffff, 0xfffffffb),
    TOBN(0xffffffff, 0xffffffff),
    TOBN(0xffffffff, 0xffffffff),
    TOBN(0xffffffff, 0xffffffff),
  };
static const BN_ULONG p384_b_limbs[] = {
    TOBN(0x08118871, 0x9d412dcc),
    TOBN(0xf729add8, 0x7a4c32ec),
    TOBN(0x77f2209b, 0x1920022e),
    TOBN(0xe3374bee, 0x94938ae2),
    TOBN(0xb62b21f4, 0x1f022094),
    TOBN(0xcd08114b, 0x604fbff9),
  };
static const BN_ULONG p384_one_limbs[] = {
    TOBN(0xffffffff, 0x00000001),
    TOBN(0x00000000, 0xffffffff),
    0x00000001,
  };

STATIC_BIGNUM_DIAGNOSTIC_PUSH

const EC_GROUP EC_GROUP_P384 = {
  FIELD(.meth =) &CURVE_P384_EC_METHOD,
  FIELD(.generator =) {
    FIELD(.meth =) &CURVE_P384_EC_METHOD,
    FIELD(.X =) STATIC_BIGNUM(p384_generator_x_limbs),
    FIELD(.Y =) STATIC_BIGNUM(p384_generator_y_limbs),
    FIELD(.Z =) STATIC_BIGNUM(p384_one_limbs),
  },
  FIELD(.order =) STATIC_BIGNUM(p384_order_limbs),
  FIELD(.order_mont =) {
    FIELD(.RR =) STATIC_BIGNUM(p384_order_rr_limbs),
    FIELD(.N =) STATIC_BIGNUM(p384_order_limbs),
    FIELD(.n0 =) { BN_MONT_CTX_N0(0x6ed46089, 0xe88fdc45) },
  },
  FIELD(.field =) STATIC_BIGNUM(p384_field_limbs),
  FIELD(.a =) STATIC_BIGNUM(p384_a_limbs),
  FIELD(.b =) STATIC_BIGNUM(p384_b_limbs),
  FIELD(.mont =) {
    FIELD(.RR =) STATIC_BIGNUM(p384_field_rr_limbs),
    FIELD(.N =) STATIC_BIGNUM(p384_field_limbs),
    FIELD(.n0 =) { BN_MONT_CTX_N0(0x1, 0x1) },
  },
  FIELD(.one =) STATIC_BIGNUM(p384_one_limbs),
};

STATIC_BIGNUM_DIAGNOSTIC_POP

